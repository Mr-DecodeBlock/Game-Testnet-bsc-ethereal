// SPDX-License-Identifier: MIT
pragma solidity 0.7.5;
pragma abicoder v2;

/**
 * @dev {ERC721} token, including:
 *
 *  - ability for holders to burn (destroy) their tokens
 *  - a minter role that allows for token minting (creation)
 *  - a pauser role that allows to stop all token transfers
 *  - token ID and URI autogeneration
 *  - includes extra properties to store important metadata
 *
 * This contract uses {AccessControl} to lock permissioned functions using the
 * different roles - head to its documentation for details.
 *
 * The account that deploys the contract will be granted the minter and pauser
 * roles, as well as the default admin role, which will let it grant both minter
 * and pauser roles to other accounts.
 */
interface IEtherealCharacter {
    /*
    * @dev Each character can have (control) 2 base elements of nature
    */
    enum ElementOfNature {
      // Elements of nature
      Air, Water, Earth, Fire,
      // Spiritual elements
      Aether,
      // Machine elements
      ElectroMetal,
      // Special elements
      Ice,
      Thunder, 
      Psychic,
      Ghost,
      DinoPower,
      Poison,
      // Ultra elements
      DivinaMagicae
    }

    /**
    * @dev Character extra metadata
    */
    struct CharacterBaseMetadata {
      bytes32 name;
      bytes24 birthdate;
      string description;
      uint256 planetId;
      uint8 genre;
    }

    struct CharacterPhysicalMetadata {
      uint24 skintone;
      uint24 haircolor;
      uint24 eyescolor;
      uint16 weight;
      uint16 height;
      uint8 bodyType;
    }

    struct CharacterAttributesMetadata {
      ElementOfNature primaryElement;
      ElementOfNature secondaryElement;
      uint8 life;
      uint8 armor;
      uint8 strength;
      uint8 speed;
      uint8 luck;
      uint8 spirit;
    }

    
    /**
     * @dev External function to set the base URI for all token IDs. 
     */
    function setBaseURI(string memory _baseURI) external;

    /**
     * @dev Creates a new token for `to`. Its token ID will be automatically
     * assigned (and available on the emitted {IERC721-Transfer} event), and the token
     * URI autogenerated based on the base URI passed at construction.
     *
     * See {ERC721-_mint}.
     *
     * Requirements:
     *
     * - the caller must have the `MINTER_ROLE`.
     */
    function mint(
      address to,
      CharacterBaseMetadata memory extraBaseMetaData,
      CharacterPhysicalMetadata memory extraPhysicalMetaData,
      CharacterAttributesMetadata memory extraAbilitiesMetaData
    )
        external
        returns (uint256);

    /**
     * @dev Burns `tokenId`. See {ERC721-_burn}.
     *
     * Requirements:
     *
     * - The caller must own `tokenId` or be an approved operator.
     */
    function burn(uint256 tokenId) external;

    /**
     * @dev Pauses all token transfers.
     *
     * See {ERC721Pausable} and {Pausable-_pause}.
     *
     * Requirements:
     *
     * - the caller must have the `PAUSER_ROLE`.
     */
    function pause() external;

    /**
     * @dev Unpauses all token transfers.
     *
     * See {ERC721Pausable} and {Pausable-_unpause}.
     *
     * Requirements:
     *
     * - the caller must have the `PAUSER_ROLE`.
     */
    function unpause() external;

}